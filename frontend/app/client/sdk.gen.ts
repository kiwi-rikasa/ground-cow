// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListUsersUserGetData, ListUsersUserGetResponse, CreateUserUserPostData, CreateUserUserPostResponse, CreateUserUserPostError, DeleteUserUserUserIdDeleteData, DeleteUserUserUserIdDeleteResponse, DeleteUserUserUserIdDeleteError, GetUserUserUserIdGetData, GetUserUserUserIdGetResponse, GetUserUserUserIdGetError, UpdateUserUserUserIdPatchData, UpdateUserUserUserIdPatchResponse, UpdateUserUserUserIdPatchError, ListAlertsAlertGetData, ListAlertsAlertGetResponse, CreateAlertAlertPostData, CreateAlertAlertPostResponse, CreateAlertAlertPostError, DeleteAlertAlertAlertIdDeleteData, DeleteAlertAlertAlertIdDeleteResponse, DeleteAlertAlertAlertIdDeleteError, GetAlertAlertAlertIdGetData, GetAlertAlertAlertIdGetResponse, GetAlertAlertAlertIdGetError, UpdateAlertAlertAlertIdPatchData, UpdateAlertAlertAlertIdPatchResponse, UpdateAlertAlertAlertIdPatchError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Users
 * Get all users.
 */
export const listUsersUserGet = <ThrowOnError extends boolean = false>(options?: Options<ListUsersUserGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersUserGetResponse, unknown, ThrowOnError>({
        url: '/user/',
        ...options
    });
};

/**
 * Create User
 * Create a new user.
 */
export const createUserUserPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUserPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserUserPostResponse, CreateUserUserPostError, ThrowOnError>({
        url: '/user/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete User
 * Delete a user by ID.
 */
export const deleteUserUserUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserUserUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserUserUserIdDeleteResponse, DeleteUserUserUserIdDeleteError, ThrowOnError>({
        url: '/user/{user_id}',
        ...options
    });
};

/**
 * Get User
 * Get a specific user by ID.
 */
export const getUserUserUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserUserUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserUserUserIdGetResponse, GetUserUserUserIdGetError, ThrowOnError>({
        url: '/user/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update a user's information.
 */
export const updateUserUserUserIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateUserUserUserIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateUserUserUserIdPatchResponse, UpdateUserUserUserIdPatchError, ThrowOnError>({
        url: '/user/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Alerts
 * Get all alerts.
 */
export const listAlertsAlertGet = <ThrowOnError extends boolean = false>(options?: Options<ListAlertsAlertGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAlertsAlertGetResponse, unknown, ThrowOnError>({
        url: '/alert/',
        ...options
    });
};

/**
 * Create Alert
 * Create a new alert.
 */
export const createAlertAlertPost = <ThrowOnError extends boolean = false>(options: Options<CreateAlertAlertPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAlertAlertPostResponse, CreateAlertAlertPostError, ThrowOnError>({
        url: '/alert/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Alert
 * Delete a specific alert by ID.
 */
export const deleteAlertAlertAlertIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAlertAlertAlertIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAlertAlertAlertIdDeleteResponse, DeleteAlertAlertAlertIdDeleteError, ThrowOnError>({
        url: '/alert/{alert_id}',
        ...options
    });
};

/**
 * Get Alert
 * Get a specific alert by ID.
 */
export const getAlertAlertAlertIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAlertAlertAlertIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAlertAlertAlertIdGetResponse, GetAlertAlertAlertIdGetError, ThrowOnError>({
        url: '/alert/{alert_id}',
        ...options
    });
};

/**
 * Update Alert
 * Update alert state or fields.
 */
export const updateAlertAlertAlertIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateAlertAlertAlertIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateAlertAlertAlertIdPatchResponse, UpdateAlertAlertAlertIdPatchError, ThrowOnError>({
        url: '/alert/{alert_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};